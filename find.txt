


-- to_pip.py
import argparse
import os
import shutil
import sys
import tempfile


def usage():
    print(
        f"Usage: python -m to_pip -n <package_name> -v <package_version> [-u <pypi_username> -p <pypi_password>] <python_files>"
    )
    sys.exit(1)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", "--package_name", help="Package name", required=True)
    parser.add_argument("-v", "--package_version", help="Package version", required=True)
    parser.add_argument("-u", "--pypi_username", help="PyPI username", default="")
    parser.add_argument("-p", "--pypi_password", help="PyPI password", default="")
    parser.add_argument("python_files", nargs="*", help="Python files to include")
    return parser.parse_args()


def create_package_dir(package_name, package_version, python_files):
    tmp_dir = tempfile.mkdtemp()
    package_dir = os.path.join(tmp_dir, f"{package_name}-{package_version}")
    os.makedirs(package_dir)

    for file in python_files:
        file_name = os.path.basename(file)
        if os.path.exists(os.path.join(package_dir, file_name)):
            print(f"Error: File {file_name} already exists in the package directory.")
            sys.exit(1)
        with open(file) as src, open(os.path.join(package_dir, file_name), "w") as dest:
            dest.write("#!/usr/bin/env python\n")
            dest.write(src.read())
        os.system(f"chmod +x {os.path.join(package_dir, os.path.basename(file))}")

    if os.path.exists("requirements.txt"):
        shutil.copy("requirements.txt", os.path.join(package_dir, "requirements.txt"))

    return package_dir


def write_setup_py(package_dir, package_name, package_version, python_files):
    modules = ", ".join([f"'{os.path.basename(file).split('.')[0].replace('-', '_')}'" for file in python_files])
    entry_points = ", ".join(
        [
            f"{os.path.basename(file).split('.')[0].replace('-', '_')} = {os.path.basename(file).split('.')[0].replace('-', '_')}:main"
            for file in python_files
        ]
    )

    setup_py = f"""
from setuptools import setup, find_packages

with open('requirements.txt') as f:
    requirements = [line.strip() for line in f.readlines()]

setup(
    name="{package_name}",
    version="{package_version}",
    packages=find_packages(),
    py_modules=[{modules}],
    install_requires=requirements,
    entry_points={{
        'console_scripts': [
            '{entry_points}',
        ],
    }},
    long_description=open('README.md', 'r').read(),
    long_description_content_type='text/markdown',)
"""

    with open(os.path.join(package_dir, "setup.py"), "w") as f:
        f.write(setup_py)


def handle_readme(package_dir, package_name):
    if os.path.exists("README.md"):
        shutil.copy("README.md", os.path.join(package_dir, "README.md"))
    else:
        with open(os.path.join(package_dir, "README.md"), "w") as f:
            f.write(f"# {package_name}\n\nThis is a placeholder README.md file.")


def create_pypirc_file(pypi_username, pypi_password):
    pypirc_content = f"""
[distutils]
index-servers =
  pypi

[pypi]
repository: https://upload.pypi.org/legacy/
username: {pypi_username}
password: {pypi_password}
"""
    with open("~/.pypirc", "w") as f:
        f.write(pypirc_content)


def to_pip(python_files, package_name, package_version, pypi_username=None, pypi_password=None):
    if not python_files:
        usage()

    package_dir = create_package_dir(package_name, package_version, python_files)
    write_setup_py(package_dir, package_name, package_version, python_files)
    handle_readme(package_dir, package_name)

    if pypi_username and pypi_password:
        create_pypirc_file(pypi_username, pypi_password)

    # Build the package before uploading
    build_exit_code = os.system(f"cd {package_dir} && python setup.py sdist bdist_wheel")
    if build_exit_code != 0:
        print("Error: Failed to build the package.")
        sys.exit(1)
    exit_code = os.system(f"cd {package_dir} && twine upload --config-file ~/.pypirc dist/*")
    if exit_code != 0:
        print("Error: Failed to upload the package.")
        sys.exit(1)


def to_pip_args():
    args = parse_args()

    if not args.python_files:
        usage()

    to_pip(args.python_files, args.package_name, args.package_version, args.pypi_username, args.pypi_password)


def main():
    to_pip_args()


if __name__ == "__main__":
    main()



-- find.sh
pwd
find . -type f \( -name "*.js" -o -name "*.html" -o -name "*.py" -o -name "*.sh" \) -not -path "./venv/*" -exec sh -c 'echo "\n\n" && echo -- "${0##*/}" && cat "${0}"' {} \; > find.txt
echo output find.txt


-- uv.sh
uvicorn app:app --reload



-- push.sh
git add .
git commit -m ok
git push



-- to_pip.sh
#!/bin/bash

# Function to display usage
usage() {
  echo "Usage: $0 -n <package_name> -v <package_version> [-u <pypi_username> -p <pypi_password>] <python_files>"
  exit 1
}

# Check if any arguments are provided
if [ $# -eq 0 ]; then
  usage
fi

# Parse command line arguments
while getopts "n:v:u:p:" opt; do
  case $opt in
    n) name="$OPTARG" ;;
    v) version="$OPTARG" ;;
    u) username="$OPTARG" ;;
    p) password="$OPTARG" ;;
    *) usage ;;
  esac
done

# Remove parsed options
shift $((OPTIND-1))

# Check if package name and version are provided
if [ -z "$name" ] || [ -z "$version" ]; then
  usage
fi

# Create temporary directory and copy Python files
tmp_dir=$(mktemp -d)
package_dir="${tmp_dir}/${name}-${version}"
mkdir -p "$package_dir"
for file in "$@"; do
  # Add shebang line to the Python file
  echo "#!/usr/bin/env python" > "${package_dir}/$(basename "$file")"
  cat "$file" >> "${package_dir}/$(basename "$file")"
  chmod +x "${package_dir}/$(basename "$file")"
done

# Add requirements.txt if it exists
if [ -f ./requirements.txt ]; then
  cat ./requirements.txt > "${package_dir}/requirements.txt"
fi

# Create setup.py file
modules=""
entry_points=""
for file in "$@"; do
  base_name=$(basename -s .py "$file" | tr '-' '_')
  modules="${modules}, '${base_name}'"
  entry_points="${entry_points}${base_name} = ${base_name}:main,"
done
modules=${modules#,}
entry_points=${entry_points%,}

cat > "${package_dir}/setup.py" << EOF
from setuptools import setup, find_packages

# Read requirements.txt
with open('requirements.txt') as f:
    requirements = [line.strip() for line in f.readlines()]

setup(
    name="${name}",
    version="${version}",
    packages=find_packages(),
    py_modules=[${modules}],
    install_requires=requirements,
    entry_points={
        'console_scripts': [
            '${entry_points}',
        ],
    },
    long_description=open('README.md', 'r').read(),
    long_description_content_type='text/markdown',)
EOF

# Copy README.md to project description
if [ -f ./README.md ]; then
  cat ./README.md > "${package_dir}/README.md"
fi

# Build the package
cd "$package_dir"
python setup.py sdist bdist_wheel

# Configure PyPI credentials if provided
if [ ! -z "$username" ] && [ ! -z "$password" ]; then
  cat > ~/.pypirc << EOF
[distutils]
index-servers =
  pypi

[pypi]
repository: https://upload.pypi.org/legacy/
username: ${username}
password: ${password}
EOF
fi

# Upload the package to PyPI
twine upload dist/*



-- index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload pip package</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-dark text-white">
<div class="container">
    <div class="row justify-content-center">
        <div class="col-12 col-md-6">
            <h1 class="text-center mt-5">Upload pip package</h1>
            <form class="mt-4" action="/api/upload" method="POST" enctype="multipart/form-data" id="uploadForm">
                <div class="mb-3">
                    <label for="package_name" class="form-label">Package Name</label>
                    <input type="text" class="form-control" id="package_name" name="package_name" required>
                </div>
                <div class="mb-3">
                    <label for="package_version" class="form-label">Package Version</label>
                    <input type="text" class="form-control" id="package_version" name="package_version" required>
                </div>
                <div class="mb-3">
                    <label for="pypi_username" class="form-label">PyPI Username</label>
                    <input type="text" class="form-control" id="pypi_username" name="pypi_username">
                </div>
                <div class="mb-3">
                    <label for="pypi_password" class="form-label">PyPI Password</label>
                    <input type="password" class="form-control" id="pypi_password" name="pypi_password">
                </div>
                <div class="mb-3">
                    <label for="python_files" class="form-label">Python Files</label>
                    <input type="file" class="form-control" id="python_files" name="python_files" multiple accept=".py"
                           required>
                </div>
                <div class="mb-3">
                    <label for="readme" class="form-label">README.md</label>
                    <input type="file" class="form-control" id="readme" name="readme" accept=".md">
                </div>
                <div class="mb-3">
                    <label for="requirements" class="form-label">requirements.txt</label>
                    <input type="file" class="form-control" id="requirements" name="requirements" accept=".txt">
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </form>
        </div>
    </div>
</div>
<script>
        document.addEventListener("DOMContentLoaded", function() {
            const form = document.getElementById("uploadForm");

            // Load saved values from localStorage
            const package_name = localStorage.getItem("package_name");
            const package_version = localStorage.getItem("package_version");
            const pypi_username = localStorage.getItem("pypi_username");
            const pypi_password = localStorage.getItem("pypi_password");

            if (package_name) {
                document.getElementById("package_name").value = package_name;
            }
            if (package_version) {
                document.getElementById("package_version").value = package_version;
            }
            if (pypi_username) {
                document.getElementById("pypi_username").value = pypi_username;
            }
            if (pypi_password) {
                document.getElementById("pypi_password").value = pypi_password;
            }

            // Save values to localStorage when form is submitted
            form.addEventListener("submit", function(event) {
                localStorage.setItem("package_name", document.getElementById("package_name").value);
                localStorage.setItem("package_version", document.getElementById("package_version").value);
                localStorage.setItem("pypi_username", document.getElementById("pypi_username").value);
                localStorage.setItem("pypi_password", document.getElementById("pypi_password").value);
            });
        });

</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


-- app.py
import os
import tempfile

from fastapi import FastAPI, Request, File, UploadFile, Form
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from starlette.responses import RedirectResponse

from to_pip import to_pip

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")


@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    return RedirectResponse("./static/html/index.html")


@app.post("/api/upload")
async def upload_files(
        package_name: str = Form(...),
        package_version: str = Form(...),
        pypi_username: str = Form(""),
        pypi_password: str = Form(""),
        python_files: list[UploadFile] = File(...),
        readme: UploadFile = File(None),
        requirements: UploadFile = File(None)
):
    tmp_dir = tempfile.mkdtemp()
    saved_files = []

    for file in python_files:
        file_path = os.path.join(tmp_dir, file.filename)
        with open(file_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        saved_files.append(file_path)

    if readme:
        readme_path = os.path.join(tmp_dir, "README.md")
        with open(readme_path, "wb") as buffer:
            content = await readme.read()
            buffer.write(content)

    if requirements:
        requirements_path = os.path.join(tmp_dir, "requirements.txt")
        with open(requirements_path, "wb") as buffer:
            content = await requirements.read()
            buffer.write(content)

    # Save the original working directory
    original_cwd = os.getcwd()

    # Change the current working directory to the temporary directory
    os.chdir(tmp_dir)

    try:
        # Call the to_pip() function with the saved files
        to_pip(saved_files, package_name, package_version, pypi_username, pypi_password)
    finally:
        # Restore the original working directory
        os.chdir(original_cwd)

    return JSONResponse({"message": "Package uploaded and processed successfully"})
